template:

  ####################################################
  #                                                  #
  #                      SELECT                      #
  #                                                  #
  ####################################################

  - select:
      - name: conditional_media
        state: >
          {% set recently_added = 'Last added' %}
          {% set paused_timeout_minutes = 15 %}
          {% set media_players = [
            states.media_player.chromecastaudio,
            states.media_player.kd_55xe9305,
            states.media_player.nest_mini,
            states.media_player.plex_plex_for_android_tv_shield_android_tv,
            states.media_player.plex_plexamp_android,
            states.media_player.sony_bravia_tv,
            states.media_player.spotify_anarion ] %}
          {% macro media(state) %}
          {% set state = media_players | selectattr('state','eq',state) | list %}
          {% set last_changed = recently_added if state | length == 0 else state | map(attribute='last_changed') | list | max %}
            {{ state | selectattr('last_changed','eq', last_changed) | map(attribute='name') | list | join }}
          {% endmacro %}
          {% set playing = media_players | selectattr('state','eq','playing') | list %}
          {% set timeout_playing = False if playing | length == 0 else
            (as_timestamp(now()) - as_timestamp(playing | map(attribute='last_changed') | list | max)) < paused_timeout_minutes * 60 %}
          {% set paused = media_players | selectattr('state','eq','paused') | list %}
          {% set timeout_paused = False if paused | length == 0 else
            (as_timestamp(now()) - as_timestamp(paused | map(attribute='last_changed') | list | max)) < paused_timeout_minutes * 60 %}
          {% if playing %}
            {{ media('playing') if timeout_playing else media('paused') if timeout_paused else media('playing') }}
          {% elif paused %}
            {{ media('paused') if timeout_paused else recently_added }}
          {% else %}
            {{ recently_added }}
          {% endif %}
        options: >
          {% set recently_added = ['Last added'] %}
          {% set media_players = [
            states.media_player.chromecastaudio,
            states.media_player.kd_55xe9305,
            states.media_player.nest_mini,
            states.media_player.plex_plex_for_android_tv_shield_android_tv,
            states.media_player.plex_plexamp_android,
            states.media_player.sony_bravia_tv,
            states.media_player.spotify_anarion ] %}
          {{ recently_added + media_players | map(attribute='name') | list }}
        select_option:
          service: select.select_option
          target:
            entity_id: select.conditional_media
          data:
            option: >
              {{ option }}

      - name: hdmi_bravia
        state: >
          {% set source = state_attr('media_player.sony_bravia_tv', 'source') %}
          {{ iif(source == None, 'HDMI3', source) }}
        options: >
          {% set source_list = state_attr('media_player.sony_bravia_tv', 'source_list') %}
          {{ iif(source_list == None, ['HDMI3'], source_list) }}
        select_option:
          service: media_player.select_source
          target:
            entity_id: media_player.sony_bravia_tv
          data:
            source: >
              {{ option }}

    ####################################################
    #                                                  #
    #                  BINARY SENSOR                   #
    #                                                  #
    ####################################################

  - binary_sensor:
      - unique_id: sidebar_update_color
        state: >
          {% set installed = states('sensor.hass_version_installed') %}
          {% set ns = namespace(update=false) %}
          {% set supervisor = state_attr('sensor.supervisor_updates','addons') %}
            {% for addon in supervisor %}
              {% if addon.version != addon.version_latest %}
              {% set ns.update = true %}
              {% endif %}
            {% endfor %}
          {% set latest = states('sensor.hass_version_latest')
          if not installed | regex_search('b') else states('sensor.hass_version_latest_beta') %}
          {{ (installed != latest and installed != 'unknown' and latest != 'unknown')
          or (states('sensor.hacs') != 'unknown' and states('sensor.hacs') | int(default=0) > 0)
          or ns.update }}

      - unique_id: supervisor_update
        state: >
          {% set ns = namespace(update=false) %}
          {% set supervisor = state_attr('sensor.supervisor_updates','addons') %}
            {% for addon in supervisor %}
              {% if addon.version != addon.version_latest %}
              {% set ns.update = true %}
              {% endif %}
            {% endfor %}
          {{ ns.update }}

      # - name: "Komfovent status Starting"
      #   state: "{{ states('sensor.komfovent_status_bit_mask') | int | bitwise_and(1) > 0 }}"
      # - name: "Komfovent status Stopping"
      #   state: "{{ states('sensor.komfovent_status_bit_mask') | int | bitwise_and(2) > 0 }}"
      # - name: "Komfovent status Fan"
      #   state: "{{ states('sensor.komfovent_status_bit_mask') | int | bitwise_and(4) > 0 }}"
      # - name: "Komfovent status Rotor"
      #   state: "{{ states('sensor.komfovent_status_bit_mask') | int | bitwise_and(8) > 0 }}"
      # - name: "Komfovent status Heating"
      #   state: "{{ states('sensor.komfovent_status_bit_mask') | int | bitwise_and(16) > 0 }}"
      # - name: "Komfovent status Cooling"
      #   state: "{{ states('sensor.komfovent_status_bit_mask') | int | bitwise_and(32) > 0 }}"
      # - name: "Komfovent status Heating denied"
      #   state: "{{ states('sensor.komfovent_status_bit_mask') | int | bitwise_and(64) > 0 }}"
      # - name: "Komfovent status Cooling denied"
      #   state: "{{ states('sensor.komfovent_status_bit_mask') | int | bitwise_and(128) > 0 }}"
      # - name: "Komfovent status Flow down"
      #   state: "{{ states('sensor.komfovent_status_bit_mask') | int | bitwise_and(256) > 0 }}"
      # - name: "Komfovent status Free heating"
      #   state: "{{ states('sensor.komfovent_status_bit_mask') | int | bitwise_and(512) > 0 }}"
      # - name: "Komfovent status Free cooling"
      #   state: "{{ states('sensor.komfovent_status_bit_mask') | int | bitwise_and(1024) > 0 }}"
      # - name: "Komfovent status Alarm fail"
      #   state: "{{ states('sensor.komfovent_status_bit_mask') | int | bitwise_and(2048) > 0 }}"
      # - name: "Komfovent status Alarm warning"
      #   state: "{{ states('sensor.komfovent_status_bit_mask') | int | bitwise_and(4096) > 0 }}"
      # - name: "Komfovent mode is Away"
      #   state: "{{ states('sensor.komfovent_mode') | int == 1 }}"
      # - name: "Komfovent mode is Normal"
      #   state: "{{ states('sensor.komfovent_mode') | int == 2 }}"
      # - name: "Komfovent mode is Intensive"
      #   state: "{{ states('sensor.komfovent_mode') | int == 3 }}"
      # - name: "Komfovent mode is Boost"
      #   state: "{{ states('sensor.komfovent_mode') | int == 4 }}"

      # - unique_id: imac_vpn
        # state: >
          # {{ is_state('switch.computer_imac', 'on') and
          # states('sensor.imac_ip') != states('sensor.myip') }}
        # attributes:
          # friendly_name: VPN
          # icon: >
          #   mdi:shield-{{ iif(is_state('switch.computer_imac', 'on') and
          #   states('sensor.imac_ip') == states('sensor.myip'), 'alert', 'check') }}
          # device_class: connectivity

      # - unique_id: udm_internet
        # state: >
          # {{ states('sensor.udm_unifios').split('|\n')[4] | default }}
        # attributes:
          # friendly_name: Internet
          # icon: mdi:wan
          # device_class: connectivity

      # - unique_id: udm_upgradable
        # state: >
          # {{ states('sensor.udm_unifios').split('|\n')[7] | default }}
        # attributes:
          # friendly_name: Uppdatering
          # icon: mdi:update
          # device_class: update

    ####################################################
    #                                                  #
    #                      SENSOR                      #
    #                                                  #
    ####################################################

  - sensor:
      - unique_id: sidebar
        state: template
        attributes:
          time: >
            {% set hours = now().strftime('%H') %}
            {% set minutes = now().strftime('%M') %}
            <span class="time">
              {{ hours }}<span class="time-colon">:</span>{{ minutes }}
            </span>
          date: >
            <font color='#6a7377'><b>
            {% if strptime(states('sensor.date'), '%Y-%m-%d').day != null %}
            {% set days = ['Poniedziałek', 'Wtorek', 'Środa', 'Czwartek', 'Piątek', 'Sobota', 'Niedziela'] %}
            {% set months = ['Stycznia', 'Lutego', 'Marca', 'Kwietnia', 'Maja', 'Czerwca',
            'Lipca', 'Sierpnia', 'Września', 'Października', 'Listopada', 'Grudnia'] %}
              {{ days[now().weekday()] }}<br>
              {{ strptime(states('sensor.date'), '%Y-%m-%d').day }} {{ months[now().month-1] }}
            {% endif %}
            </b></font>
          greet: >
            <b>
            {% set time = now().hour %}
            {% if time <= 1 %} Dobranoc {{'\U0001F611'}}
            {% elif time <= 3 %} Dobranoc {{'\U0001F62A'}}
            {% elif time <= 5 %} Dobranoc {{'\U0001F634'}}
            {% elif time <= 7 %} Dzień dobry {{'\U0001F4A9'}}
            {% elif time <= 9 %} Dzień dobry {{'\u2615\uFE0F'}}
            {% elif time <= 10 %} Dzień dobry {{'\U0001F642'}}
            {% elif time <= 13 %} Dzień dobry {{'\U0001F60A'}}
            {% elif time <= 15 %} Dzień dobry {{'\U0001F60E'}}
            {% elif time <= 17 %} Dzień dobry {{'\U0001F44B\U0001F3FB'}}
            {% elif time <= 19 %} Dobry wieczór {{'\U0001F44B\U0001F3FB'}}
            {% elif time <= 22 %} Dobry wieczór {{'\U0001F60C'}}
            {% elif time <= 23 %} Dobry wieczór {{'\U0001F974'}}
            {% else %} Dobry wieczór {{'\U0001F974'}}
            {% endif %}
            </b>
          active: >
            <b>
            {% set lights = [
              states.light.lampka_u_hani,
              states.light.kotlownia
            ] %}

            {% set switches = [
              states.switch.chromecast_audio,
              states.switch.netflix,
              states.switch.plex,
              states.switch.radio,
              states.switch.server_power,
              states.switch.tv,
              states.switch.youtube,
              states.switch.zraszacz
            ] %}

            {% set media_players = [
              states.media_player.sony_bravia_tv
            ] %}

            {% set lights_on = lights | selectattr('state','eq','on') | list %}
            {% set lights_name = lights | selectattr('state','eq','on') | map(attribute='name') | join(', ') %}

            {% set switches_on = switches | selectattr('state','eq','on') | list %}
            {% set media_players_playing = media_players | selectattr('state','eq','playing') | list %}
            {% set append = switches_on + media_players_playing %}
            {% set switches_name = append | map(attribute='name') | join(', ') %}

            {% if (lights_on | length == 0) and (switches_on | length == 1) %}
              {{ switches_name | regex_replace(',([^,]*)$',' i\\1') }} jest włączone

            {% elif (lights_on | length == 0) and (switches_on | length > 1) %}
              {{ switches_name | regex_replace(',([^,]*)$',' i\\1') }} są włączone

            {% elif (lights_on | length == 1) and (switches_on | length == 1) %}
              {{ lights_name }} i {{switches_name }} są włączone

            {% elif (lights_on | length == 1) and (switches_on | length > 1) %}
              {{ lights_name }}, {{ switches_name | regex_replace(',([^,]*)$',' i\\1') }} są włączone

            {% elif (lights_on | length > 1) and (switches_on | length == 1) %}
              {{ lights_on | length }} światła i {{ switches_name }} są włączone

            {% elif (lights_on | length > 1) and (switches_on | length > 1) %}
              {{ lights_on | length }} światła, {{ switches_name | regex_replace(',([^,]*)$',' i\\1') }} są włączone

            {% elif (lights_on | length == 1) and (switches_on | length == 0) %}
              {{ lights_name }} jest włączony

            {% elif (lights_on | length > 1) and (switches_on | length == 0) %}
              {{ lights_on | length }} światła są włączone

            {% else %}
              <font color='#6a7377'>Wszystko wyłączone</font>
            {% endif %}
            </b>
          open: >
            <b>
            {% set doors = [
              states.binary_sensor.drzwi_wejsciowe_contact,
              states.binary_sensor.drzwi_do_ogrodu_contact
            ] %}

            {% set doors_open = doors | selectattr('state','eq','on') | list %}
            {% set doors_name = doors | selectattr('state','eq','on') | map(attribute='name') | join(', ') %}

            {% if (doors_open | length == 1) %}
              {{ doors_name }} są otwarte

            {% elif (doors_open | length > 1) %}
              {{ doors_open | length }} drzwi są otwarte

            {% else %}
              <font color='#6a7377'>Wszystkie drzwi i okna zamknięte</font>
            {% endif %}
            </b>
          laundry: >
            {% set entity_id = 'input_select.washing_machine' %}
            {% if is_state(entity_id, 'Washing') %}
              <b>Pralka pierze</b>
            {% endif %}
          vacuum: >
            {% set entity_id = 'vacuum.valetudo_robot' %}
            {% if is_state(entity_id, 'cleaning') %}
              <b>Robot sprząta</b>
            {% elif is_state(entity_id, 'returning') %}
              <b>Robot skończył sprzątać</b>
            {% endif %}
          weather: >
            {% set temperature = states('sensor.openweathermap_temperature') %}
            {% set condition = states('sensor.openweathermap_condition') %}
            {% set weather_icon = '' %}
            {% if condition == 'clear-night' %} {{ weather_icon }} {{'\U0001F315'}}
            {% elif condition == 'cloudy' %} {{ weather_icon }} {{'\U00002601\U0000FE0F'}}
            {% elif condition == 'exceptional' %} {{ weather_icon }} {{'\U0001F31E'}}
            {% elif condition == 'fog' %} {{ weather_icon }} {{'\U0001F32B\U0000FE0F'}}
            {% elif condition == 'hail' %} {{ weather_icon }} {{'\U000026AA'}}
            {% elif condition == 'lightning' %} {{ weather_icon }} {{'\U0001F329\U0000FE0F'}}
            {% elif condition == 'lightning-rainy' %} {{ weather_icon }} {{'\U000026C8\U0000FE0F'}}
            {% elif condition == 'partlycloudy' %} {{ weather_icon }} {{'\U0001F324\U0000FE0F'}}
            {% elif condition == 'pouring' %} {{ weather_icon }} {{'\U00002614'}}
            {% elif condition == 'rainy' %} {{ weather_icon }} {{'\U00002602\U0000FE0F'}}
            {% elif condition == 'snowy' %} {{ weather_icon }} {{'\U00002744\U0000FE0F'}}
            {% elif condition == 'snowy-rainy' %} {{ weather_icon }} {{'\U0001F328\U0000FE0F'}}
            {% elif condition == 'sunny' %} {{ weather_icon }} {{'\U00002600\U0000FE0F'}}
            {% elif condition == 'windy' %} {{ weather_icon }} {{'\U0001F32C\U0000FE0F'}}
            {% elif condition == 'windy-variant' %} {{ weather_icon }} {{'\U0001F390'}}
            {% endif %}
            {% set apparent = states('sensor.openweathermap_feels_like_temperature') | round %}
            {% set precip = states('sensor.openweathermap_forecast_precipitation_probability') | round %}
            {% if not is_state('sensor.openweathermap_temperature', 'unknown') %}
              {% if temperature | float(default=0) <= 0.0 %}
                {{ weather_icon }} Odczuwalna {{ apparent }}° z {{ precip }}% ryzykiem śniegu {{'\u2744\uFE0F'}}
              {% elif temperature | float(default=0) > 0.0 %}
                {{ weather_icon }} Odczuwalna {{ apparent}}° z {{ precip }}% ryzykiem deszczu {{ '\u2614\uFE0F' if precip > 30 }}
              {% endif %}
            {% else %}
              Nie można załadować prognozy pogody...
            {% endif %}
          garbage: >
            {% set entities = states.sensor | selectattr('attributes.device_class', 'defined')
              | selectattr('attributes.device_class', 'eq', 'garbage_collection__schedule')
              | rejectattr('entity_id', 'search', 'garbage')
              | list %}
              {% if entities %}
                {% if entities | selectattr('attributes.days','eq', 0) | list | count > 0 -%}

              🗑️ Śmieci {% for sensor in entities if sensor.attributes.days == 0 -%}
                {% if not loop.first %}{% if not loop.last %}, {% else %} i {% endif %}{% endif %}{{ sensor.name | lower }}
              {%- endfor %} dzisiaj ({{ now().strftime('%A') | replace('Monday', 'poniedziałek')
                            | replace('Tuesday', 'wtorek')
                            | replace('Wednesday', 'środę')
                            | replace('Thursday', 'czwartek')
                            | replace('Friday', 'piątek')
                            | replace('Saturday', 'sobotę')
                            | replace('Sunday', 'niedzielę') }})

              {% elif entities | selectattr('attributes.days','eq', 1) | list | count > 0 -%}
              🗑️ Śmieci {% for sensor in entities if sensor.attributes.days == 1 -%}
                {% if not loop.first %}{% if not loop.last %}, {% else %} i {% endif %}{% endif %}{{ sensor.name | lower }}
              {%- endfor %} jutro ({{ (now() + timedelta(days=1)).strftime('%A') | replace('Monday', 'poniedziałek')
                            | replace('Tuesday', 'wtorek')
                            | replace('Wednesday', 'środę')
                            | replace('Thursday', 'czwartek')
                            | replace('Friday', 'piątek')
                            | replace('Saturday', 'sobotę')
                            | replace('Sunday', 'niedzielę') }})

              {% elif entities | selectattr('attributes.days','eq', 2) | list | count > 0 -%}
              Śmieci {% for sensor in entities if sensor.attributes.days == 2 -%}
                {% if not loop.first %}{% if not loop.last %}, {% else %} i {% endif %}{% endif %}{{ sensor.name | lower }}
              {%- endfor %} pojutrze ({{ (now() + timedelta(days=2)).strftime('%A') | replace('Monday', 'poniedziałek')
                            | replace('Tuesday', 'wtorek')
                            | replace('Wednesday', 'środę')
                            | replace('Thursday', 'czwartek')
                            | replace('Friday', 'piątek')
                            | replace('Saturday', 'sobotę')
                            | replace('Sunday', 'niedzielę') }})

              {% elif entities | selectattr('attributes.days','gt', 2) | list | count > 0 -%}
              Śmieci {% for sensor in entities  if sensor.attributes.days == entities | selectattr('attributes.days','gt', 2) | map(attribute='attributes.days') | min -%}
                  {% if not loop.first %}{% if not loop.last %}, {% else %} i {% endif %}{% endif %}{{ sensor.name | lower }}
              {%- endfor %} za {{ entities | selectattr('attributes.days','gt', 2) | map(attribute='attributes.days') | min }} dni w {{ (now() + timedelta(days=entities | selectattr('attributes.days','gt', 2) | map(attribute='attributes.days') | min)).strftime('%A') | replace('Monday', 'poniedziałek')
                            | replace('Tuesday', 'wtorek')
                            | replace('Wednesday', 'środę')
                            | replace('Thursday', 'czwartek')
                            | replace('Friday', 'piątek')
                            | replace('Saturday', 'sobotę')
                            | replace('Sunday', 'niedzielę') }}  {% endif %}
              {% endif %}

          battery: >
            {% set entities = states.sensor
              | selectattr('entity_id', 'search', 'battery' or 'bateri')
              | rejectattr('entity_id', 'search', 'battery_state')
              | rejectattr('entity_id', 'search', 'battery_health')
              | rejectattr('entity_id', 'search', 'battery_temperature')
              | map(attribute = 'entity_id') | list %}
            {% for sensor in entities if states(sensor) != 'unknown' and states(sensor) != 'unavailable' and states(sensor) != 'None' and states(sensor) | int(default=0) <= 5 %}
              {% if loop.first %} {{'\u26A0\uFE0F'}} {% else %}, {% endif %}
              {{ state_attr(sensor, 'friendly_name') }} {{ states(sensor) }}%
            {% endfor %}
          calendar: |
            {# set helper variables #}
            {% set ns = namespace(today=false) %}
            {% set ns.tomorrow=false %}

            {# Get a list of calendar event entities with start times #}
            {% set entities = states.sensor | selectattr('entity_id','search','ical_kalendarz') |  selectattr('attributes.start','defined') | list %}

            {# Check if there is any event today or tomorroe #}
            {% for item in entities %}
              {% if item.attributes.start.strftime('%Y-%m-%d') == now().strftime('%Y-%m-%d') %}
                {% set ns.today = true %}
              {% elif item.attributes.start.strftime('%Y-%m-%d') == (now() + timedelta(days=1)).strftime('%Y-%m-%d')  %}
                {% set ns.tomorrow = true %}
              {% endif %}
            {% endfor %}

            {# If there is at least one event today, iterate over them #}
            {% if ns.today %}
              {% for sensor in entities if sensor.attributes.start.strftime('%Y-%m-%d') == now().strftime('%Y-%m-%d') %}
                {%- set start_time = sensor.attributes.start -%}
                {%- set end_time = sensor.attributes.end -%}
                {%- set event = sensor.attributes.summary -%}
                {%- set location = sensor.attributes.location -%}
                {%- if start_time != None -%}
                  {%- set time = as_timestamp(start_time) | timestamp_custom('%H:%M') %}
                  {%- set time_end = as_timestamp(end_time) | timestamp_custom('%H:%M') %}
                  {%- set hours = as_timestamp(start_time) | timestamp_custom('%H') | int(default=0) / 24 %}
                  {%- set day = start_time.strftime('%A')
                  | replace('Monday', 'poniedziałek')
                  | replace('Tuesday', 'wtorek')
                  | replace('Wednesday', 'środę')
                  | replace('Thursday', 'czwartek')
                  | replace('Friday', 'piątek')
                  | replace('Saturday', 'sobotę')
                  | replace('Sunday', 'niedzielę') %}
                    {{'\U0001F4C5'}} {{ event }} dziś między {{ time }}-{{ time_end }}\n
                {% endif -%}
              {% endfor %}
            {# If there is at least one event tomorrow, iterate over them #}
            {% elif ns.tomorrow %}
              {% for sensor in entities if sensor.attributes.start.strftime('%Y-%m-%d') == (now() + timedelta(days=1)).strftime('%Y-%m-%d') -%}
                {%- set start_time = sensor.attributes.start -%}
                {%- set end_time = sensor.attributes.end -%}
                {%- set event = sensor.attributes.summary -%}
                {%- set location = sensor.attributes.location -%}
                {%- if start_time != None -%}
                  {%- set time = as_timestamp(start_time) | timestamp_custom('%H:%M') -%}
                  {%- set time_end = as_timestamp(end_time) | timestamp_custom('%H:%M') -%}
                  {%- set hours = as_timestamp(start_time) | timestamp_custom('%H') | int(default=0) / 24 -%}
                  {%- set count = (as_timestamp(start_time) - as_timestamp(now())) / 86400 - hours -%}
                  {%- set day = start_time.strftime('%A')
                  | replace('Monday', 'poniedziałek')
                  | replace('Tuesday', 'wtorek')
                  | replace('Wednesday', 'środę')
                  | replace('Thursday', 'czwartek')
                  | replace('Friday', 'piątek')
                  | replace('Saturday', 'sobotę')
                  | replace('Sunday', 'niedzielę') -%}
                    {{ event }} jutro między {{ time }}-{{ time_end }}{{ '\n' }}
                {%- endif -%}
              {% endfor %}

            {# Else just list the next event as usual #}
            {% else %}
              {%- set start_time = entities[0].attributes.start -%}
              {%- set end_time = entities[0].attributes.end -%}
              {%- set event = entities[0].attributes.summary -%}
              {%- set location = entities[0].attributes.location -%}
              {%- if start_time != None -%}
                {%- set time = as_timestamp(start_time) | timestamp_custom('%H:%M') %}
                {%- set time_end = as_timestamp(end_time) | timestamp_custom('%H:%M') %}
                {%- set hours = as_timestamp(start_time) | timestamp_custom('%H') | int(default=0) / 24 %}
                {%- set count = (as_timestamp(start_time) - as_timestamp(now())) / 86400 - hours %}
                {%- set day = start_time.strftime('%A')
                | replace('Monday', 'poniedziałek')
                | replace('Tuesday', 'wtorek')
                | replace('Wednesday', 'środę')
                | replace('Thursday', 'czwartek')
                | replace('Friday', 'piątek')
                | replace('Saturday', 'sobotę')
                | replace('Sunday', 'niedzielę') %}
                  {% if day == 'wtorek' -%}
                    {{event }} za {{ (count + hours) | round }} dni we {{ day }} między {{ time }}-{{ time_end }}
                  {% else -%}
                    {{event }} za {{ (count + hours) | round }} dni w {{ day }} między {{ time }}-{{ time_end }}
                  {% endif %}
              {% endif -%}
            {% endif %}

          plex: >
            {% if is_state('binary_sensor.plex_availability', 'off') %}
              {{'\u26A0\uFE0F'}} Plex padł...
            {% endif %}
          # nas: |
            # {% if is_state('binary_sensor.nas_internet_access', 'off') %}
              # {{'\u26A0\uFE0F'}} Check NAS Internet access
            # {% endif %}

      - unique_id: sidebar_calendar
        state: template
        attributes:
          calendar: >
            {% set start_time = state_attr('calendar.anarion_dunedain', 'start_time') %}
            {% set end_time = state_attr('calendar.anarion_dunedain', 'end_time') %}
            {% set event = state_attr('calendar.anarion_dunedain', 'message') %}
            {% set location = state_attr('calendar.anarion_dunedain', 'location') %}
            {% if start_time != None %}
              {% set time = as_timestamp(start_time) | timestamp_custom('%H:%M') %}
              {% set time_end = as_timestamp(end_time) | timestamp_custom('%H:%M') %}
              {% set hours = as_timestamp(start_time) | timestamp_custom('%H') | int(default=0) / 24 %}
              {% set count = (as_timestamp(start_time) - as_timestamp(now())) / 86400 - hours %}
              {% set day = strptime(start_time, '%Y-%m-%d %H:%M:%S').strftime('%A')
              | replace('Monday', 'poniedziałek')
              | replace('Tuesday', 'wtorek')
              | replace('Wednesday', 'środę')
              | replace('Thursday', 'czwartek')
              | replace('Friday', 'piątek')
              | replace('Saturday', 'sobotę')
              | replace('Sunday', 'niedzielę') %}
              {% if count <= 0.0 %}
                {{'\U0001F4C5'}} {{ event }} dziś między {{ time }}-{{ time_end }}
              {% elif count <= 1.0 %}
                {{ event}} jutro między {{ time }}-{{ time_end }}
              {% elif count <= 2.0 %}
                {{ event}} pojutrze między {{ time }}-{{ time_end }}
              {% else %}
                {% if day == 'wtorek' %}
                  {{event }} za {{ (count + hours) | round }} dni we {{ day }} między {{ time }}-{{ time_end }}
                {% else %}
                  {{event }} za {{ (count + hours) | round }} dni w {{ day }} między {{ time }}-{{ time_end }}
                {% endif %}
              {% endif %}
            {% endif %}

      - unique_id: nas_status
        state: >
          {% set entity_id = 'sensor.nas_volume_1_status' %}
          {% if is_state(entity_id, 'normal') %}
            Działa
          {% elif is_state(entity_id, 'background') %}
            Sprawdź
          {% else %}
            {{ states(entity_id) }}
          {% endif %}
        attributes:
          icon: custom:synology-nas

      - unique_id: nas_vpn
        state: >
          {{ 'Nie połączony' if states('sensor.myip') == states('sensor.template_public_ip') else 'Połączony' }}
        attributes:
          icon: >
            mdi:shield-{{ 'alert' if states('sensor.myip') == states('sensor.template_public_ip') else 'check' }}

      - unique_id: nas_net_down
        state: ' '
        attributes:
          friendly_name: >
            {% set down = states('sensor.nas_network_down') | float(default=0) %}
            {% if down < 1000 %} {{ down | round(0) }} kb/s
            {% elif down >= 1000 %} {{ ((down / 1000) | round(2) | string).rstrip('.0') }} Mb/s
            {% endif %}
          icon: mdi:arrow-down-bold

      - unique_id: nas_net_up
        state: ' '
        attributes:
          friendly_name: >
            {% set up = states('sensor.nas_network_up') | float(default=0) %}
            {% if up < 1000 %} {{ up | round(0) }} kb/s
            {% elif up >= 1000 %} {{ ((up / 1000) | round(2) | string).rstrip('.0') }} Mb/s
            {% endif %}
          icon: mdi:arrow-up-bold

      - unique_id: hass_version
        state: >
          {{ 'Najnowsza' if states('sensor.hass_version_installed') ==
          states('sensor.hass_version_latest') else states('sensor.hass_version_latest') }}
        attributes:
          friendly_name: >
            Zainstalowana {{ states('sensor.hass_version_installed') }}
          icon: mdi:home-assistant

      - unique_id: hass_dev_release
        state: >
          {% set start_time = state_attr('calendar.home_assistant_devs', 'start_time') %}
          {{ (as_timestamp(start_time, default=0) + 60*60*20.5) | timestamp_local(default) }}
        attributes:
          friendly_name: >
            {% set release = state_attr('calendar.home_assistant_devs','message') %}
            {% if release == 'Home Assistant Core Beta Release' %}
              Następna beta
            {% elif release == 'Home Assistant Core Release' %}
              Następna wersja
            {% else %}
              {{ release }}
            {% endif %}
          icon: mdi:dev-to
          device_class: timestamp

      - unique_id: printer_status
        state: >
          {% macro prt(state, translate) %}
          {{ translate if states('sensor.hp_deskjet_2600_series') == state }}
          {% endmacro %}
          {{ prt('On', 'Włączony') }}
          {{ prt('Scanning', 'Skanuje') }}
          {{ prt('Copying', 'Kopiuje') }}
          {{ prt('Printing', 'Drukuje') }}
          {{ prt('Cancelling Job', 'Kasuje pracę') }}
          {{ prt('trayEmptyOrOpen', 'trayEmptyOrOpen') }}
          {{ prt('idle', 'bezczynny') }}
          {{ prt('Off', 'Wyłączony') }}
        attributes:
          friendly_name: Drukarka
          icon: mdi:printer-wireless

      - unique_id: domain_counter
        state: >
          {{ states | count }}
        attributes:
          automation: >
            {{ states.automation | count }}
          binary_sensor: >
            {{ states.binary_sensor | count }}
          device_tracker: >
            {{ states.device_tracker | count }}
          light: >
            {{ states.light | count }}
          media_player: >
            {{ states.media_player | count }}
          sensor: >
            {{ states.sensor | count }}
          switch: >
            {{ states.switch | count }}
          other: >
            {{ states.calendar | count +
            states.camera | count +
            states.climate | count +
            states.fan | count +
            states.input_boolean | count +
            states.input_number | count +
            states.input_select | count +
            states.lock | count +
            states.person | count +
            states.remote | count +
            states.scene | count +
            states.script | count +
            states.select | count +
            states.sun | count +
            states.timer | count +
            states.vacuum | count +
            states.weather | count +
            states.zone | count }}

      # - unique_id: vacuum_filter
        # icon: custom:roborock-filter
        # unit_of_measurement: '%'
        # state: >
          # {{ (state_attr('vacuum.morty', 'filter_left') / 1.5) | round }}
      # - unique_id: vacuum_mainbrush
        # icon: custom:roborock-mainbrush
        # unit_of_measurement: '%'
        # state: >
          # {{ (state_attr('vacuum.morty', 'main_brush_left') / 3) | round }}
      # - unique_id: vacuum_sensors
        # icon: custom:roborock-sensor
        # unit_of_measurement: '%'
        # state: >
          # {{ (state_attr('vacuum.morty', 'sensor_dirty_left') / 0.3) | round }}
      # - unique_id: vacuum_sidebrush
        # icon: custom:roborock-sidebrush
        # unit_of_measurement: '%'
        # state: >
          # {{ (state_attr('vacuum.morty', 'side_brush_left') / 2) | round }}
      # - unique_id: vacuum_lastclean
        # icon: mdi:calendar-clock
        # device_class: timestamp
        # state: >
          # {{ state_attr('vacuum.morty', 'clean_stop') | replace(' ','T') }}

      - unique_id: coronavirus
        state: template
        attributes:
          template: >
              {% set break = '‍ ‍ ‍ ‍ ‍ ‍<font color="#2f3436">|</font> ‍ ‍ ‍ ‍ ' %}
              <font color='#6a7377'>
              <ha-icon icon="mdi:virus"></ha-icon> <b>Coronavirus</b>{{ break -}}
              <ha-icon icon="mdi:emoticon-sad"></ha-icon> <b>{{ states('sensor.covid19_infections') }}</b> przypadków{{ break -}}
              <ha-icon icon="mdi:grave-stone"></ha-icon> <b>{{ states('sensor.covid19_deaths') }}</b> zgonów{{ break -}}
              <ha-icon icon="mdi:emoticon-happy"></ha-icon> <b>{{ states('sensor.covid19_recovered') }}</b> wyzdrowień
              </font>
          icon: mdi:virus

      - unique_id: fullykiosk_storage
        state: >
          {% set FreeSpace = states('sensor.fire_tablet_internal_storage_free_space') | float(default=0) %}
          {% set TotalSpace = states('sensor.fire_tablet_internal_storage_total_space') | float(default=0) %}
          {% if not (FreeSpace == 0.0 or TotalSpace == 0.0) %}
            {{ 100 - (FreeSpace / TotalSpace * 100) | int(default=0) }}
          {% endif %}
        attributes:
          friendly_name: Storage
          icon: mdi:sd
          unit_of_measurement: '%'

      - unique_id: fullykiosk_memory
        state: >
          {% set FreeMemory = states('sensor.fire_tablet_ram_free_memory') | float(default=0) %}
          {% set TotalMemory = states('sensor.fire_tablet_ram_total_memory') | float(default=0) %}
          {% if not (FreeMemory == 0.0 or TotalMemory == 0.0) %}
            {{ 100 - (FreeMemory / TotalMemory * 100) | int(default=0) }}
          {% endif %}
        attributes:
          friendly_name: Memory
          icon: mdi:memory
          unit_of_measurement: '%'

      - unique_id: fullykiosk_last_app_start
        state: >
          {{ as_timestamp(states('sensor.fire_tablet_last_app_start'), default=0) | timestamp_local(default=0) }}
        attributes:
          friendly_name: Ostatni restart
          icon: mdi:update
          device_class: timestamp

      - name: "Komfovent Mode Text"
        state: >
          {%- if states('sensor.komfovent_mode_num') | int(default=0) == 0 %}
            Standby
          {%- elif states('sensor.komfovent_mode_num') | int(default=0) == 1 %}
            Poza Domem
          {%- elif states('sensor.komfovent_mode_num') | int(default=0) == 2 %}
            Normalny
          {%- elif states('sensor.komfovent_mode_num') | int(default=0) == 3 %}
            Intensywny
          {%- elif states('sensor.komfovent_mode_num') | int(default=0) == 4 %}
            Turbo
          {%- elif states('sensor.komfovent_mode_num') | int(default=0) == 5 %}
            Okap
          {%- elif states('sensor.komfovent_mode_num') | int(default=0) == 6 %}
            Kominek
          {%- elif states('sensor.komfovent_mode_num') | int(default=0) == 7 %}
            Nadrzędny
          {%- elif states('sensor.komfovent_mode_num') | int(default=0) == 8 %}
            Urlop
          {%- elif states('sensor.komfovent_mode_num') | int(default=0) == 9 %}
            Jakość powietrza
          {%- elif states('sensor.komfovent_mode_num') | int(default=0) == 10 %}
            wyłączony
          {% else %}
            fail
          {%- endif %}
        icon: hass:account-cog
      - name: "Ventilation info"
        state: "{{ states('sensor.komfovent_mode_text') }}"
        attributes:
          moc_grzewcza: "{{ states('sensor.komfovent_heater_power_w') }}"
          temperatura_na_zewnatrz: "{{ states('sensor.komfovent_outdoor_temperature_c') }}"
          efektywnosc_wymiennika: "{{ states('sensor.komfovent_energy_saving') }}"
          przeplyw_wywiewu: "{{ states('sensor.komfovent_extract_fan_intensivity') }}"
          temperatura_wyciagu: "{{ states('sensor.komfovent_extract_temperature_c') }}"
          zabrudzenie_filtra: "{{ states('sensor.komfovent_filter_impurity') }}"
          odzyskana_energia_miesiac: "{{ states('sensor.komfovent_heat_recovery_w') }}"
          odzysk_ciepla: "{{ states('sensor.komfovent_heating_recovery_month_kwh') }}"
          zuzyta_energia: "{{ states('sensor.komfovent_ahu_consumption_month_kwh') }}"
          przeplyw_nawiewu: "{{ states('sensor.komfovent_supply_fan_intensivity') }}"
          temperatura_nawiewu: "{{ states('sensor.komfovent_supply_temperature_c') }}"
          temperatura: "{{ states('sensor.komfovent_status_panel_temperature') }}"
          wilgotnosc: "{{ states('sensor.komfovent_status_panel_humidity') }}"

      - unique_id: daily_digest
        state: template
        attributes:
          digest: >
            Dzień dobry. Dzisiaj jest
            {#- Data -#}
                {%- set days = ['Poniedziałek', 'Wtorek', 'Środa', 'Czwartek', 'Piątek', 'Sobota', 'Niedziela'] -%}
                {%- set months = ['Stycznia', 'Lutego', 'Marca', 'Kwietnia', 'Maja', 'Czerwca',
                'Lipca', 'Sierpnia', 'Września', 'Października', 'Listopada', 'Grudnia'] %}
                {% set temp = states('sensor.openweathermap_feels_like_temperature')|round %}
                  {{- days[now().weekday()] }} {{ strptime(states('sensor.date'), '%Y-%m-%d').day }} {{ months[now().month-1] }}.

            {#- Pogoda -#}
                Obecnie mamy {{states('sensor.openweathermap_weather')}} i temperaturę odczuwalną {{ temp }}
                {%- if temp|int == 1 %} stopień.
                {% elif (temp|int % 10 >= 2 and temp|int % 10 <= 4 and (temp|int % 100 < 10 or temp|int % 100 >= 20)) %} stopnie.
                {% else %} stopni.
                {% endif -%}
                {%- set condition = states('sensor.openweathermap_forecast_condition') -%}
                {%- set temp = states('sensor.openweathermap_forecast_temperature')|round -%}
                Dzisiaj będzie {% if condition == 'clear-night' -%}bezchmurnie
                {%- elif condition == 'cloudy' -%}pochmurnie
                {%- elif condition == 'exceptional' -%}wyjątkowo
                {%- elif condition == 'fog'-%}mgliście
                {%- elif condition == 'hail' -%}grad
                {%- elif condition == 'lightning' -%}burzowo
                {%- elif condition == 'lightning-rainy' -%}burzowo i deszczowo
                {%- elif condition == 'partlycloudy' -%}częściowo pochmurnie
                {%- elif condition == 'pouring' -%}lało jak z cebra
                {%- elif condition == 'rainy' -%}deszczowo
                {%- elif condition == 'snowy' -%}padał śnieg
                {%- elif condition == 'snowy-rainy' -%}padał deszcz ze śniegiem
                {%- elif condition == 'sunny' -%}słonecznie
                {%- elif condition == 'windy' -%}wietrznie
                {%- elif condition == 'windy-variant' -%}wiał wiatr
                {% endif -%}, a temperatura maksymalna wyniesie {{ temp }}
                {%- if temp|int == 1 %} stopień.
                {% elif (temp|int % 10 >= 2 and temp|int % 10 <= 4 and (temp|int % 100 < 10 or temp|int % 100 >= 20)) %} stopnie.
                {% else %} stopni.
                {% endif -%}
                Będzie wiał wiatr {% set winbearing = (states('sensor.openweathermap_forecast_wind_bearing')|int/45)|round  %}
                {%- set winddir = ['z północy', 'z północnego-wschodu','ze wschodu','z południowego wschodu','z południa','z południowego-zachodu','z zachodu','z północnego-zachodu'] -%}
                {{ winddir[winbearing] }} z prędkością {{(states('sensor.openweathermap_forecast_wind_speed')|int*3.6)|round}} km/h.
                {% if states('sensor.openweathermap_forecast_precipitation')|int == 0 %} Dzisiaj ma nie padać.
                {% else -%} Prognozowany opad wyniesie {{ states('sensor.openweathermap_forecast_precipitation') }} milimetra.
                {% endif -%}

            {#- Czas do pracy -#}
                Czas dojazdu do pracy: {{states('sensor.home_to_work')}} minut.
            {#- Przypomnienie o śmieciach #}
               {% set entities = states.sensor | selectattr('attributes.device_class', 'defined')
                                | selectattr('attributes.device_class', 'eq', 'garbage_collection__schedule')
                                | rejectattr('entity_id', 'search', 'garbage')
                                | list -%}
                  {% if entities -%}
                    {% if entities | selectattr('attributes.days','eq', 1) | list | count > 0 -%}
                    Pamiętaj żeby dzisiaj wieczorem wystawić śmieci {% for sensor in entities if sensor.attributes.days == 1 -%}
                      {% if not loop.first %}{% if not loop.last %}, {% else %} i {% endif %}{% endif %}{{ sensor.name | lower }}
                    {%- endfor -%}.
                    {% endif -%}
                  {% endif -%}
            {#- Kalendarz -#}
                {%- set entities = states.sensor | selectattr('entity_id','search','ical_kalendarz')
                          | selectattr('attributes.start','defined') | list -%}
                {%- set ns = namespace(today=false) -%}
                {%- for item in entities %}
                              {%- if item.attributes.start.strftime('%Y-%m-%d') == now().date() %}
                                {% set ns.today = true %}
                              {% endif -%}
                            {% endfor %}
                {% if ns.today %}
                Dzisiaj w kalendarzu masz {%- for sensor in entities if sensor.attributes.start.strftime('%Y-%m-%d') == now().strftime('%Y-%m-%d') -%}
                    {% if not loop.first %}{% if not loop.last %}, {% else %} i {% endif %}{% endif %}
                    {{- sensor.name + '\n' | lower }} o godzinie {{ sensor.attributes.start.strftime('%H:%M') }}
                {% endfor %}
                {% else %}Dzisiaj nie masz nic w kalendarzu.{% endif %}
                Miłego dnia!
