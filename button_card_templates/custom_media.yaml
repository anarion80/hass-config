media_source:
  styles:
    custom_fields:
      circle:
        # - clip-path: circle()
        # - width: 79%
        # - pointer-events: none
        # - display: flex
        - display: flex
        #- width: 90%
        - letter-spacing: 0.03vw
        #- margin: -6% -6% 0 0
        - justify-self: end
        - white-space: normal
        - word-wrap: break-word
        #- font-size: 0.5vw
        - opacity: 1
  custom_fields:
    circle: >
      [[[
          if (entity.state === 'on') {
              let input = variables.circle;
              return `${input}`;
          }
      ]]]

# base_media:
#   variables:
#     media_on: >
#       [[[ return !entity || ['playing', 'paused'].indexOf(entity.state) !== -1; ]]]
#     media_off: >
#       [[[ return !entity || ['off', 'idle', 'standby', 'unknown', 'unavailable'].indexOf(entity.state) !== -1; ]]]
#   tap_action:
#     action: >
#       [[[
#         return variables.media_on
#             ? 'call-service'
#             : 'none';
#       ]]]
#     service: media_player.media_play_pause
#     service_data:
#       entity_id: >
#         [[[
#           return variables.entity_id;
#         ]]]
#   double_tap_action:
#     action: more-info
#   styles:
#     card:
#       - color: >
#           [[[
#             return variables.media_on && variables.entity_picture === undefined
#                 ? 'rgba(0, 0, 0, 0.6)'
#                 : variables.media_off
#                     ? '#97989c'
#                     : '#efefef';
#           ]]]
#       - text-shadow: >
#           [[[
#             return variables.media_off || variables.entity_picture === undefined
#                 ? 'none'
#                 : '1px 1px 5px rgba(18, 22, 23, 0.9)';
#           ]]]

recently_added:
  template:
    - conditional_media
  name: Ostatnio dodane
  variables:
    i: >
      [[[
        if (entity) {
          let max = entity.attributes.data.length - 1;
          return Math.floor(Math.random() * max) + 1;
        }
      ]]]
  state_display: >
    [[[
      if (entity) {
        let elt = this.shadowRoot,
          await = setTimeout(marquee,0),
          data = entity.attributes.data,
          number = data[variables.i].number === undefined && data[variables.i].aired !== undefined
            ? `(${data[variables.i].aired.split("-")[0]})`
            : data[variables.i].number === undefined && data[variables.i].aired === undefined
            ? ' '
              : data[variables.i].number,
          output =  `${data[variables.i].title} ${number}`;
        function marquee() {
          let state = elt.getElementById("state"),
            container = elt.getElementById("container");
          if (state && container) {
            state.innerHTML = output;
            let ro = new ResizeObserver(entries => {
              let spacer = "&nbsp;".repeat(3),
                s = entries[0],
                c = entries[1],
                r = s && s.contentRect &&
                    c && c.contentRect &&
                    s.contentRect.width !== 0 &&
                    c.contentRect.width !== 0;
              if (r && s.contentRect.width < c.contentRect.width) {
                state.classList.remove("marquee");
              }
              else if (r && s.contentRect.width >= c.contentRect.width) {
                state.innerHTML = `${output} ${spacer} ${output} ${spacer}&nbsp;`;
                state.classList.add("marquee");
              }
            });
            ro.observe(state);
            ro.observe(container);
          }
        }
        return output;
      }
      return variables.translate_unknown;
    ]]]
  custom_fields:
    blur: >
      [[[
        return entity === undefined || '<div></div>';
      ]]]
  styles:
    custom_fields:
      media_image:
        - background-position: center center
        - background-image: >
            [[[
              return entity === undefined ||
                `url("${entity.attributes.data[variables.i].fanart}"),
                url("${entity.attributes.data[variables.i].poster}")`;
            ]]]
      blur:
        - display: >
            [[[
              return entity === undefined
                ? 'none'
                : 'initial';
              ]]]
      overlayx:
        - display: none
    card:
      - color: >
          [[[
            return entity === undefined
              ? 'rgba(255, 255, 255, 0.3)'
              : '#efefef';
          ]]]
      - text-shadow: >
          [[[
            return entity === undefined
              ? 'none'
              : '1px 1px 5px rgba(18, 22, 23, 0.9)';
          ]]]
