#################################################
#                                               #
#                 BASE CAMERA                   #
#                                               #
#################################################
base_camera:
  tap_action:
    action: >
      [[[
        return !(variables.state === 'off' || variables.state === 'standby') ? 'call-service' : 'none';
      ]]]
    service: media_player.media_play_pause
    service_data:
      entity_id: >
        [[[ return entity === undefined || entity.entity_id; ]]]
  double_tap_action:
    action: call-service
    service: >
      [[[ return variables.state === 'off' || variables.state === 'standby' ? 'media_player.turn_on' : 'media_player.turn_off'; ]]]
    service_data:
      entity_id: >
        [[[ return entity === undefined || entity.entity_id; ]]]
  styles:
    card:
      - color: >
          [[[
            let entity_picture = entity === undefined || entity.attributes.entity_picture;
            if (variables.state === 'off' || variables.state === 'standby' ||
              variables.state === 'unknown' || variables.state === 'unavailable' || entity === undefined) {
              return 'rgba(255, 255, 255, 0.3)';
            }
            return (variables.state != 'off' && variables.state != 'standby') && (entity_picture == null) ? '#4b5254' : '#97989c';
          ]]]
      - text-shadow: >
          [[[
            let entity_picture = entity === undefined ? null : entity.attributes.entity_picture;
            return entity_picture == null ? 'none' : '1px 1px 5px rgba(18, 22, 23, 0.9)';
          ]]]

#################################################
#                                               #
#                   CAMERA                      #
#                                               #
#################################################
camera:
  template:
    - base
    - base_camera
  state_display: >
      [[[ if (variables.state == 'idle' || variables.state == 'recording') return ' '; ]]]
  styles:
    grid:
      - grid-template-areas: |
          "icon  circle"
          "n     n"
          "s     s"
      - grid-template-columns: repeat(2, 1fr)
      - grid-template-rows: auto repeat(2, min-content)
      - gap: 1.3%
      - align-items: start
    name:
      - justify-self: start
      - line-height: 121%
    state:
      - justify-self: start
      - line-height: 115%
    custom_fields:
      icon:
        - width: 70%
        - fill: '#9da0a2'
        - opacity: >
            [[[
              let entity_picture = entity === undefined ? null : entity.attributes.entity_picture;
              if (entity.state !== 'unavailable' && entity.state !== 'standby') {
                return entity_picture == null ? 1 : 0;
              }
            ]]]
    card:
      #- align-self: middle
      - background-color: none
      - background-size: cover #137% 101%
      - background-position: center
      - background-repeat: no-repeat
      - background-image: >
          [[[
            let entity_picture = entity === undefined || entity.attributes.entity_picture;
            if (variables.state === 'off' || variables.state === 'standby' ||
              variables.state === 'unknown' || variables.state === 'unavailable' || entity === undefined) {
              return 'linear-gradient(0deg, rgba(115, 115, 115, 0.2) 0%, rgba(115, 115, 115, 0.2) 100%)';
            }
            return (variables.state != 'off' && variables.state != 'standby') && (entity_picture == null) ?
              'linear-gradient(0deg, rgba(255, 255, 255, 0.8) 0%, rgba(255, 255, 255, 0.8) 100%)' :
              'linear-gradient(0deg, rgba(0,0,0,.1) 0%, rgba(0,0,0,0) 100%), url(' + entity_picture + ')';
          ]]]

#################################################
#                                               #
#              CONDITIONAL CAMERA               #
#                                               #
#################################################
conditional_camera:
  template:
    - camera
  state_display: >
    [[[
      if (entity) {
        let elt = this.shadowRoot,
          await = setTimeout(marquee, 0),
          name = entity.attributes.friendly_name,
          output = name === undefined ? name : variables.translate_idle;
        function marquee() {
          let state = elt.getElementById("state"),
            container = elt.getElementById("container");
          if (state && container) {
            state.innerHTML = output;
            let ro = new ResizeObserver(entries => {
              let spacer = "&nbsp;".repeat(3),
                s = entries[0],
                c = entries[1],
                r = s && s.contentRect &&
                    c && c.contentRect &&
                    s.contentRect.width !== 0 &&
                    c.contentRect.width !== 0;
              if (r && s.contentRect.width < c.contentRect.width) {
                state.classList.remove("marquee");
              }
              else if (r && s.contentRect.width >= c.contentRect.width) {
                state.innerHTML = `${output} ${spacer} ${output} ${spacer}&nbsp;`;
                state.classList.add("marquee");
              }
            });
            ro.observe(state);
            ro.observe(container);
          }
        }
        return output;
      }
      return variables.translate_unknown;
    ]]]
  custom_fields:
    blur: >
      [[[
        if (entity.attributes.entity_picture !== undefined) return '<div></div>';
      ]]]
    camera_image: >
      <div></div>
  styles:
    name:
      - z-index: 3
      - margin-bottom: -1%
    state:
      - z-index: 3
    card:
      - color: >
          [[[
            return entity === undefined
              ? 'rgba(255, 255, 255, 0.3)'
              : '#efefef';
          ]]]
      - text-shadow: >
          [[[
            return entity === undefined
              ? 'none'
              : '1px 1px 5px rgba(18, 22, 23, 0.9)';
          ]]]
    custom_fields:
      blur:
        - display: >
            [[[
              return entity === undefined
                ? 'none'
                : 'initial';
              ]]]
      overlay:
        - display: none
      camera_image:
        - background-size: cover
        - background-position: center
        - background-repeat: no-repeat
        - background-image: >
            [[[
              return entity.attributes.entity_picture === undefined ? 'none' : `url(${entity.attributes.entity_picture})`;
            ]]]
      icon:
        - z-index: 3
        - width: 29%
        - fill: >
            [[[
              return variables.state === 'off' || variables.state === 'standby' ||
              variables.state === 'unknown' || variables.state === 'unavailable' || entity === undefined ?
                '#9da0a2' :
                'rgba(255, 255, 255, 0.8)';
            ]]]