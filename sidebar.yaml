- sensor:
    - unique_id: sidebar
      state: template
      attributes:
        time: >
          {% set hours = now().strftime('%H') %}
          {% set minutes = now().strftime('%M') %}
          <span class="time">
            {{ hours }}<span class="time-colon">:</span>{{ minutes }}
          </span>
        date: >
          <font color='#6a7377'><b>
          {% if strptime(states('sensor.date'), '%Y-%m-%d').day != null %}
          {% set days = ['Poniedzia≈Çek', 'Wtorek', '≈öroda', 'Czwartek', 'PiƒÖtek', 'Sobota', 'Niedziela'] %}
          {% set months = ['Stycznia', 'Lutego', 'Marca', 'Kwietnia', 'Maja', 'Czerwca',
          'Lipca', 'Sierpnia', 'Wrze≈õnia', 'Pa≈∫dziernika', 'Listopada', 'Grudnia'] %}
            {{ days[now().weekday()] }}<br>
            {{ strptime(states('sensor.date'), '%Y-%m-%d').day }} {{ months[now().month-1] }}
          {% endif %}
          </b></font>
        greet: >
          <b>
          {% set time = now().hour %}
          {% if time <= 1 %} Dobranoc {{'\U0001F611'}}
          {% elif time <= 3 %} Dobranoc {{'\U0001F62A'}}
          {% elif time <= 5 %} Dobranoc {{'\U0001F634'}}
          {% elif time <= 7 %} Dzie≈Ñ dobry {{'\U0001F4A9'}}
          {% elif time <= 9 %} Dzie≈Ñ dobry {{'\u2615\uFE0F'}}
          {% elif time <= 10 %} Dzie≈Ñ dobry {{'\U0001F642'}}
          {% elif time <= 13 %} Dzie≈Ñ dobry {{'\U0001F60A'}}
          {% elif time <= 15 %} Dzie≈Ñ dobry {{'\U0001F60E'}}
          {% elif time <= 17 %} Dzie≈Ñ dobry {{'\U0001F44B\U0001F3FB'}}
          {% elif time <= 19 %} Dobry wiecz√≥r {{'\U0001F44B\U0001F3FB'}}
          {% elif time <= 22 %} Dobry wiecz√≥r {{'\U0001F60C'}}
          {% elif time <= 23 %} Dobry wiecz√≥r {{'\U0001F974'}}
          {% else %} Dobry wiecz√≥r {{'\U0001F974'}}
          {% endif %}
          </b>
        active: >
          <b>
          {% set lights = [
            states.light.lampka_u_hani,
            states.light.kotlownia
          ] %}

          {% set switches = [
            states.switch.chromecast_audio,
            states.switch.netflix,
            states.switch.plex,
            states.switch.radio,
            states.switch.server_power,
            states.switch.tv,
            states.switch.youtube,
            states.switch.zraszacz
          ] %}

          {% set media_players = [
            states.media_player.sony_kd_55xe9305
          ] %}

          {% set lights_on = lights | selectattr('state','eq','on') | list %}
          {% set lights_name = lights | selectattr('state','eq','on') | map(attribute='name') | join(', ') %}

          {% set switches_on = switches | selectattr('state','eq','on') | list %}
          {% set media_players_playing = media_players | selectattr('state','eq','playing') | list %}
          {% set append = switches_on + media_players_playing %}
          {% set switches_name = append | map(attribute='name') | join(', ') %}

          {% if (lights_on | length == 0) and (switches_on | length == 1) %}
            {{ switches_name | regex_replace(',([^,]*)$',' i\\1') }} jest w≈ÇƒÖczone

          {% elif (lights_on | length == 0) and (switches_on | length > 1) %}
            {{ switches_name | regex_replace(',([^,]*)$',' i\\1') }} sƒÖ w≈ÇƒÖczone

          {% elif (lights_on | length == 1) and (switches_on | length == 1) %}
            {{ lights_name }} i {{switches_name }} sƒÖ w≈ÇƒÖczone

          {% elif (lights_on | length == 1) and (switches_on | length > 1) %}
            {{ lights_name }}, {{ switches_name | regex_replace(',([^,]*)$',' i\\1') }} sƒÖ w≈ÇƒÖczone

          {% elif (lights_on | length > 1) and (switches_on | length == 1) %}
            {{ lights_on | length }} ≈õwiat≈Ça i {{ switches_name }} sƒÖ w≈ÇƒÖczone

          {% elif (lights_on | length > 1) and (switches_on | length > 1) %}
            {{ lights_on | length }} ≈õwiat≈Ça, {{ switches_name | regex_replace(',([^,]*)$',' i\\1') }} sƒÖ w≈ÇƒÖczone

          {% elif (lights_on | length == 1) and (switches_on | length == 0) %}
            {{ lights_name }} jest w≈ÇƒÖczony

          {% elif (lights_on | length > 1) and (switches_on | length == 0) %}
            {{ lights_on | length }} ≈õwiat≈Ça sƒÖ w≈ÇƒÖczone

          {% else %}
            <font color='#6a7377'>Wszystko wy≈ÇƒÖczone</font>
          {% endif %}
          </b>
        open: >
          <b>
          {% set doors = [
            states.binary_sensor.drzwi_wejsciowe_contact,
            states.binary_sensor.drzwi_do_ogrodu_contact
          ] %}

          {% set doors_open = doors | selectattr('state','eq','on') | list %}
          {% set doors_name = doors | selectattr('state','eq','on') | map(attribute='name') | join(', ') %}

          {% if (doors_open | length == 1) %}
            {{ doors_name }} sƒÖ otwarte

          {% elif (doors_open | length > 1) %}
            {{ doors_open | length }} drzwi sƒÖ otwarte

          {% else %}
            <font color='#6a7377'>Wszystkie drzwi i okna zamkniƒôte</font>
          {% endif %}
          </b>
        laundry: >
          {% set entity_id = 'input_select.washing_machine' %}
          {% if is_state(entity_id, 'Washing') %}
            <b>Pralka pierze</b>
          {% endif %}
        vacuum: >
          {% set entity_id = 'vacuum.valetudo_robot' %}
          {% if is_state(entity_id, 'cleaning') %}
            <b>Robot sprzƒÖta</b>
          {% elif is_state(entity_id, 'returning') %}
            <b>Robot sko≈Ñczy≈Ç sprzƒÖtaƒá</b>
          {% endif %}
        weather: >
          {% set temperature = states('sensor.openweathermap_temperature') %}
          {% set condition = states('sensor.openweathermap_condition') %}
          {% set weather_icon = '' %}
          {% if condition == 'clear-night' %} {{ weather_icon }} {{'\U0001F315'}}
          {% elif condition == 'cloudy' %} {{ weather_icon }} {{'\U00002601\U0000FE0F'}}
          {% elif condition == 'exceptional' %} {{ weather_icon }} {{'\U0001F31E'}}
          {% elif condition == 'fog' %} {{ weather_icon }} {{'\U0001F32B\U0000FE0F'}}
          {% elif condition == 'hail' %} {{ weather_icon }} {{'\U000026AA'}}
          {% elif condition == 'lightning' %} {{ weather_icon }} {{'\U0001F329\U0000FE0F'}}
          {% elif condition == 'lightning-rainy' %} {{ weather_icon }} {{'\U000026C8\U0000FE0F'}}
          {% elif condition == 'partlycloudy' %} {{ weather_icon }} {{'\U0001F324\U0000FE0F'}}
          {% elif condition == 'pouring' %} {{ weather_icon }} {{'\U00002614'}}
          {% elif condition == 'rainy' %} {{ weather_icon }} {{'\U00002602\U0000FE0F'}}
          {% elif condition == 'snowy' %} {{ weather_icon }} {{'\U00002744\U0000FE0F'}}
          {% elif condition == 'snowy-rainy' %} {{ weather_icon }} {{'\U0001F328\U0000FE0F'}}
          {% elif condition == 'sunny' %} {{ weather_icon }} {{'\U00002600\U0000FE0F'}}
          {% elif condition == 'windy' %} {{ weather_icon }} {{'\U0001F32C\U0000FE0F'}}
          {% elif condition == 'windy-variant' %} {{ weather_icon }} {{'\U0001F390'}}
          {% endif %}
          {% set apparent = states('sensor.openweathermap_feels_like_temperature') | round %}
          {% set precip = states('sensor.openweathermap_forecast_precipitation_probability') | round %}
          {% if not is_state('sensor.openweathermap_temperature', 'unknown') %}
            {% if temperature | float(default=0) <= 0.0 %}
              {{ weather_icon }} Odczuwalna {{ apparent }}¬∞ z {{ precip }}% ryzykiem ≈õniegu {{'\u2744\uFE0F'}}
            {% elif temperature | float(default=0) > 0.0 %}
              {{ weather_icon }} Odczuwalna {{ apparent}}¬∞ z {{ precip }}% ryzykiem deszczu {{ '\u2614\uFE0F' if precip > 30 }}
            {% endif %}
          {% else %}
            Nie mo≈ºna za≈Çadowaƒá prognozy pogody...
          {% endif %}
        garbage: >
          {% set garbage = states.calendar | selectattr('entity_id', 'search', 'smieci') | selectattr('attributes.start_time','defined') | list -%}

          {% if garbage %}
          {# set helper variables #}
          {% set ns = namespace(today=false) %}
          {% set ns.tomorrow=false %}
          {% set ns.after_tomorrow=false %}

          {% for item in garbage %}
            {% if (item.attributes.start_time | as_datetime | as_local - today_at()).days == 0 %}
              {% set ns.today = true %}
            {% elif (item.attributes.start_time | as_datetime | as_local - today_at()).days == 1  %}
              {% set ns.tomorrow = true %}
            {% elif (item.attributes.start_time | as_datetime | as_local - today_at()).days == 2  %}
              {% set ns.after_tomorrow = true %}
            {% endif %}
          {% endfor %}

          {% if ns.today %}
          üóëÔ∏è {% for calendar in garbage if ((calendar.attributes.start_time | as_datetime | as_local - today_at()).days == 0) -%}
                {% if not loop.first %}{% if not loop.last %}, {% else %} i {% endif %}{% endif %}{{ calendar.attributes.message  }}
              {%- endfor %} dzisiaj ({{ now().strftime('%A') | replace('Monday', 'w poniedzia≈Çek')
                            | replace('Tuesday', 'we wtorek')
                            | replace('Wednesday', 'w ≈õrodƒô')
                            | replace('Thursday', 'w czwartek')
                            | replace('Friday', 'w piƒÖtek')
                            | replace('Saturday', 'w sobotƒô')
                            | replace('Sunday', 'w niedzielƒô') }})

          {% elif ns.tomorrow %}
          {% for calendar in garbage if ((calendar.attributes.start_time | as_datetime | as_local - today_at()).days == 1) -%}
            {% if not loop.first %}{% if not loop.last %}, {% else %} i {% endif %}{% endif %}{{ calendar.attributes.message }}
          {%- endfor %} jutro ({{ (now() + timedelta(days=1)).strftime('%A') | replace('Monday', 'w poniedzia≈Çek')
                        | replace('Tuesday', 'we wtorek')
                        | replace('Wednesday', 'w ≈õrodƒô')
                        | replace('Thursday', 'w czwartek')
                        | replace('Friday', 'w piƒÖtek')
                        | replace('Saturday', 'w sobotƒô')
                        | replace('Sunday', 'w niedzielƒô') }})

          {% elif ns.after_tomorrow %}
          {% for calendar in garbage if ((calendar.attributes.start_time | as_datetime | as_local - today_at()).days == 2) -%}
            {% if not loop.first %}{% if not loop.last %}, {% else %} i {% endif %}{% endif %}{{ calendar.attributes.message  }}
          {%- endfor %} pojutrze ({{ (now() + timedelta(days=2)).strftime('%A') | replace('Monday', 'w poniedzia≈Çek')
                        | replace('Tuesday', 'we wtorek')
                        | replace('Wednesday', 'w ≈õrodƒô')
                        | replace('Thursday', 'w czwartek')
                        | replace('Friday', 'w piƒÖtek')
                        | replace('Saturday', 'w sobotƒô')
                        | replace('Sunday', 'w niedzielƒô') }})

          {% else %}
          {% for calendar in garbage if ((calendar.attributes.start_time | as_datetime | as_local - today_at()).days == (garbage | map(attribute='attributes.start_time') | min | as_datetime | as_local - today_at()).days)  -%}
                {% if not loop.first %}{% if not loop.last %}, {% else %} i {% endif %}{% endif %}{{ calendar.attributes.message  }}
              {%- endfor %} za {{ (garbage | map(attribute='attributes.start_time') | min | as_datetime | as_local - today_at()).days }} dni ({{ (now() + timedelta(days=(garbage | map(attribute='attributes.start_time') | min | as_datetime | as_local - today_at()).days)).strftime('%A') | replace('Monday', 'w poniedzia≈Çek')
                          | replace('Tuesday', 'we wtorek')
                          | replace('Wednesday', 'w ≈õrodƒô')
                          | replace('Thursday', 'w czwartek')
                          | replace('Friday', 'w piƒÖtek')
                          | replace('Saturday', 'w sobotƒô')
                          | replace('Sunday', 'w niedzielƒô') }})
            {% endif %}
            {% endif %}

        battery: >
          {% set entities = states.sensor
            | selectattr('entity_id', 'search', 'battery' or 'bateri')
            | rejectattr('entity_id', 'search', 'battery_state')
            | rejectattr('entity_id', 'search', 'battery_health')
            | rejectattr('entity_id', 'search', 'battery_temperature')
            | rejectattr('entity_id', 'search', 'battery_power')
            | map(attribute = 'entity_id') | list %}
          {% for sensor in entities if states(sensor) != 'unknown' and states(sensor) != 'unavailable' and states(sensor) != 'None' and states(sensor) | int(default=0) <= 5 %}
            {% if loop.first %} {{'\u26A0\uFE0F'}} {% else %}, {% endif %}
            {{ state_attr(sensor, 'friendly_name') }} {{ states(sensor) }}%
          {% endfor %}
        calendar: |
          {# set helper variables #}
          {% set ns = namespace(today=false) %}
          {% set ns.tomorrow=false %}

          {# Get a list of calendar event entities with start times #}
          {% set entities = states.sensor | selectattr('entity_id','search','ical_kalendarz') | selectattr('attributes.start','defined') | list %}

          {# Check if there is any event today or tomorrow #}
          {% if entities %}
          {% for item in entities %}
            {% if item.attributes.start.strftime('%Y-%m-%d') == now().strftime('%Y-%m-%d') %}
              {% set ns.today = true %}
            {% elif item.attributes.start.strftime('%Y-%m-%d') == (now() + timedelta(days=1)).strftime('%Y-%m-%d')  %}
              {% set ns.tomorrow = true %}
            {% endif %}
          {% endfor %}

          {# If there is at least one event today, iterate over them #}
          {% if ns.today %}
            {% for sensor in entities if sensor.attributes.start.strftime('%Y-%m-%d') == now().strftime('%Y-%m-%d') -%}
              {%- set start_time = sensor.attributes.start -%}
              {%- set end_time = sensor.attributes.end -%}
              {%- set event = sensor.attributes.summary -%}
              {%- set location = sensor.attributes.location -%}
              {%- if start_time != None -%}
                {%- set time = as_timestamp(start_time) | timestamp_custom('%H:%M') -%}
                {%- set time_end = as_timestamp(end_time) | timestamp_custom('%H:%M') -%}
                {%- set hours = as_timestamp(start_time) | timestamp_custom('%H') | int(default=0) / 24 -%}
                {%- set day = start_time.strftime('%A')
                | replace('Monday', 'poniedzia≈Çek')
                | replace('Tuesday', 'wtorek')
                | replace('Wednesday', '≈õrodƒô')
                | replace('Thursday', 'czwartek')
                | replace('Friday', 'piƒÖtek')
                | replace('Saturday', 'sobotƒô')
                | replace('Sunday', 'niedzielƒô') -%}
                  {{'\U0001F4C5'}} {{ event }} dzi≈õ miƒôdzy {{ time }}-{{ time_end }}{{ '\n' }}
              {%- endif -%}
            {% endfor %}
          {# If there is at least one event tomorrow, iterate over them #}
          {% elif ns.tomorrow %}
            {% for sensor in entities if sensor.attributes.start.strftime('%Y-%m-%d') == (now() + timedelta(days=1)).strftime('%Y-%m-%d') -%}
              {%- set start_time = sensor.attributes.start -%}
              {%- set end_time = sensor.attributes.end -%}
              {%- set event = sensor.attributes.summary -%}
              {%- set location = sensor.attributes.location -%}
              {%- if start_time != None -%}
                {%- set time = as_timestamp(start_time) | timestamp_custom('%H:%M') -%}
                {%- set time_end = as_timestamp(end_time) | timestamp_custom('%H:%M') -%}
                {%- set hours = as_timestamp(start_time) | timestamp_custom('%H') | int(default=0) / 24 -%}
                {%- set day = start_time.strftime('%A')
                | replace('Monday', 'poniedzia≈Çek')
                | replace('Tuesday', 'wtorek')
                | replace('Wednesday', '≈õrodƒô')
                | replace('Thursday', 'czwartek')
                | replace('Friday', 'piƒÖtek')
                | replace('Saturday', 'sobotƒô')
                | replace('Sunday', 'niedzielƒô') -%}
                  {{ event }} jutro miƒôdzy {{ time }}-{{ time_end }}{{ '\n' }}
              {%- endif -%}
            {% endfor %}

          {# Else just list the next event as usual #}
          {% else %}
            {%- set start_time = entities[0].attributes.start -%}
            {%- set end_time = entities[0].attributes.end -%}
            {%- set event = entities[0].attributes.summary -%}
            {%- set location = entities[0].attributes.location -%}
            {%- if start_time != None -%}
              {%- set time = as_timestamp(start_time) | timestamp_custom('%H:%M') %}
              {%- set time_end = as_timestamp(end_time) | timestamp_custom('%H:%M') %}
              {%- set hours = as_timestamp(start_time) | timestamp_custom('%H') | int(default=0) / 24 %}
              {%- set count = (as_timestamp(start_time) - as_timestamp(now())) / 86400 - hours %}
              {%- set day = start_time.strftime('%A')
              | replace('Monday', 'poniedzia≈Çek')
              | replace('Tuesday', 'wtorek')
              | replace('Wednesday', '≈õrodƒô')
              | replace('Thursday', 'czwartek')
              | replace('Friday', 'piƒÖtek')
              | replace('Saturday', 'sobotƒô')
              | replace('Sunday', 'niedzielƒô') %}
                {% if day == 'wtorek' -%}
                  {{event }} za {{ (count + hours) | round }} dni we {{ day }} miƒôdzy {{ time }}-{{ time_end }}
                {% else -%}
                  {{event }} za {{ (count + hours) | round }} dni w {{ day }} miƒôdzy {{ time }}-{{ time_end }}
                {% endif %}
            {% endif -%}
          {% endif %}
          {% endif %}

        plex: >
          {% if is_state('binary_sensor.plex_availability', 'off') %}
            {{'\u26A0\uFE0F'}} Plex pad≈Ç...
          {% endif %}
        # nas: |
          # {% if is_state('binary_sensor.nas_internet_access', 'off') %}
            # {{'\u26A0\uFE0F'}} Check NAS Internet access
          # {% endif %}