
# Use this file to store secrets like usernames and passwords.
# Learn more at https://www.home-assistant.io/docs/configuration/secrets/
some_password: [REDACTED]
burze_dzis_net.api_key: [REDACTED]
main_alarm_code: [REDACTED]
google_maps_api_key: [REDACTED]
google_assistant_service_account:
  private_key: [REDACTED]
  client_email: [REDACTED]
spotify_client_id: [REDACTED]
spotify_client_secret: [REDACTED]
cors_allowed_origins:
  - [REDACTED]
influx_db_token: [REDACTED]
google_assistant_project: [REDACTED]
google_client_id: [REDACTED]
google_client_secret: [REDACTED]

#recorder_db_url: mysql://homeassistant:REDACTED PASSWORD@192.168.99.1/homeassistant?charset=utf8mb4

# iphonedetect_mattias: 192.168.99.1
# iphonedetect_sanja: 192.168.99.1

# wemo_static:
  # - 192.168.99.1
  # - 192.168.99.1
  # - 192.168.99.1

plex_token: [REDACTED]
plex_host: [REDACTED]
plex_port: [REDACTED]
#plex_availability: curl 192.168.2.13:32400 > /dev/null && echo ON || echo OFF
#plex_availability: ssh -o StrictHostKeyChecking=no -i /config/.ssh/id_rsa anarion@192.168.2.13 "docker container inspect -f '{{.State.Status}}' plex"
plex_availability: ssh -o StrictHostKeyChecking=no -i /config/.ssh/id_rsa [REDACTED] "docker ps | grep plex" > /dev/null && echo ON || echo OFF
#command: response=$(curl -LIk -m 3 http://10.0.0.10:32400 -o /dev/null -w "%{http_code}\n" -s); test "$response" -ge 200 && echo "Online" || echo "Offline" 
# playstation_5_state: ssh -o StrictHostKeyChecking=no -i /config/.ssh/id_rsa REDACTED USER@IP './ps5.py -b 192.168.99.1'
# playstation_5_wake: ssh -o StrictHostKeyChecking=no -i /config/.ssh/id_rsa REDACTED USER@IP 'cd ~/ps5-wake && ./ps5-wake -vW -REDACTED -H 192.168.99.1'

# public_ip: 192.168.99.1
# homekit_ip_address: 192.168.99.1
# skanetrafiken: https://api.resrobot.se/v2/trip?key=REDACTED&originCoordLat=REDACTED&originCoordLong=REDACTED&destId=REDACTED&format=json
# darksky_api_key: REDACTED

# ha_dockermon_cpu: http://192.168.99.1/container/home-assistant/stats
# ha_dockermon_uptime: http://192.168.99.1/container/home-assistant
# ha_dockermon_watchtower: http://192.168.99.1/container/watchtower
# ha_dockermon_restart_container: 'curl REDACTED URL:PORT/container/home-assistant/restart'

# wake_on_lan_mac: REDACTED MAC
# wake_on_lan_host: 192.168.99.1

# imac_switchbot: ssh -o StrictHostKeyChecking=no -i /config/.ssh/id_rsa pi@192.168.99.1 'cd ~/python-host && sudo python3 switchbot_py3.py --device REDACTED MAC'
# imac_notify_motion_hall: ssh -o StrictHostKeyChecking=no -i /config/.ssh/id_rsa REDACTED USER@IP 'osascript -e '\''display notification "RĂ¶relse i hallen detekterat" with title "Home Assistant"'\'''
# imac_notify_laundry: ssh -o StrictHostKeyChecking=no -i /config/.ssh/id_rsa REDACTED USER@IP 'osascript -e '\''display notification "TvĂ¤tten Ă¤r klar" with title "Home Assistant"'\'''

# imac_off: 'ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i /config/.ssh/id_rsa REDACTED USER@IP sudo /sbin/shutdown -h now'
# imac_sleep: 'ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i /config/.ssh/id_rsa REDACTED USER@IP sudo /sbin/shutdown -s now'
# imac_restart: 'ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i /config/.ssh/id_rsa REDACTED USER@IP sudo /sbin/shutdown -r now'

# imac_system_ssd: ssh -o StrictHostKeyChecking=no -i /config/.ssh/id_rsa REDACTED USER@IP 'df / | awk '\''{ print $5 }'\'' | tail -n 1 | cut -d'\''%'\'' -f1'
# imac_macintosh_hd: ssh -o StrictHostKeyChecking=no -i /config/.ssh/id_rsa REDACTED USER@IP 'df /Volumes/Macintosh\ HD | awk '\''{ print $5 }'\'' | tail -n 1 | cut -d'\''%'\'' -f1'

# imac_cpu: ssh -o StrictHostKeyChecking=no -i /config/.ssh/id_rsa REDACTED USER@IP 'top -l 1 | awk '\''/CPU usage/ {printf("%.1f\n", $3)}'\'''
# imac_mem: ssh -o StrictHostKeyChecking=no -i /config/.ssh/id_rsa REDACTED USER@IP 'ps -A -o %mem | awk '\''{ mem += $1} END {print mem}'\'''
# imac_ip: ssh -o StrictHostKeyChecking=no -i /config/.ssh/id_rsa REDACTED USER@IP 'dig @resolver1.opendns.com ANY myip.opendns.com +short'
# imac_uptime: ssh -o StrictHostKeyChecking=no -i /config/.ssh/id_rsa REDACTED USER@IP sysctl -n kern.boottime | awk '{print $4}' | sed 's/,//g'

# monitors_mute_on: ssh -o StrictHostKeyChecking=no -i /config/.ssh/id_rsa REDACTED USER@IP 'osascript -e "set volume with output muted"'
# monitors_mute_off: ssh -o StrictHostKeyChecking=no -i /config/.ssh/id_rsa REDACTED USER@IP 'osascript -e "set volume without output muted"'
# monitors_mute_check: ssh -o StrictHostKeyChecking=no -i /config/.ssh/id_rsa REDACTED USER@IP 'osascript -e "output muted of (get volume settings)"'
# monitors_volume_slider: ssh -o StrictHostKeyChecking=no -i /config/.ssh/id_rsa REDACTED USER@IP 'osascript -e "set volume output volume {{ states('input_number.monitors_volume') | int }} --100%"'
# monitors_update_volume: ssh -o StrictHostKeyChecking=no -i /config/.ssh/id_rsa REDACTED USER@IP 'osascript -e "output volume of (get volume settings)"'

# reference_click: ssh -o StrictHostKeyChecking=no -i /config/.ssh/id_rsa REDACTED USER@IP 'osascript -e "ignoring application responses" -e "tell application \"System Events\"" -e "click menu bar item 1 of menu bar 2 of application process \"Reference Systemwide\"" -e "end tell" -e "end ignoring"'
# reference_kill: ssh -o StrictHostKeyChecking=no -i /config/.ssh/id_rsa REDACTED USER@IP 'killall System\ Events'
# reference_monitors: ssh -o StrictHostKeyChecking=no -i /config/.ssh/id_rsa REDACTED USER@IP 'osascript -e "tell application \"System Events\"" -e "click menu item \"KRK Monitors\" of menu 1 of menu bar item 1 of menu bar 2 of application process \"Reference Systemwide\"" -e "end tell"'
# reference_headphones: ssh -o StrictHostKeyChecking=no -i /config/.ssh/id_rsa REDACTED USER@IP 'osascript -e "tell application \"System Events\"" -e "click menu item \"Beyerdynamic DT 990 Pro\" of menu 1 of menu bar item 1 of menu bar 2 of application process \"Reference Systemwide\"" -e "end tell"'

# ir_fan_power: b64:REDACTED IR
# ir_fan_swing: b64:REDACTED IR
# ir_fan_speed: b64:REDACTED IR

# ir_purifier_power: b64:REDACTED IR
# ir_purifier_auto: b64:REDACTED IR
# ir_purifier_speed_down: b64:REDACTED IR
# ir_purifier_speed_up: b64:REDACTED IR
# ir_purifier_turbo: b64:REDACTED IR
nas_disk: ssh -q -o StrictHostKeyChecking=no -i /config/.ssh/id_rsa [REDACTED USER@IP] df / | awk '{print $5}' | tail -n 1
nas_mem: ssh -q -o StrictHostKeyChecking=no -i /config/.ssh/id_rsa [REDACTED USER@IP] free | grep Mem | awk '{print $3 / $2 * 100}'
nas_cpu: ssh -q -o StrictHostKeyChecking=no -i /config/.ssh/id_rsa [REDACTED USER@IP] top -bn 1 | grep "Cpu(s)" | awk '{print 100 - $8}'
nas_uptime: ssh -q -o StrictHostKeyChecking=no -i /config/.ssh/id_rsa [REDACTED USER@IP] uptime -s